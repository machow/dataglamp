{
  "_args": [
    [
      "angular-ui-ace@git+https://github.com/angular-ui/ui-ace.git",
      "/Users/machow/Dropbox/Repo/web/dataglamp"
    ]
  ],
  "_from": "git+https://github.com/angular-ui/ui-ace.git",
  "_id": "angular-ui-ace@0.2.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/angular-ui-ace",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/angular-ui/ui-ace/master/package.json",
      "gitUrl": "git://github.com/angular-ui/ui-ace.git",
      "httpsUrl": "git+https://github.com/angular-ui/ui-ace.git",
      "shortcut": "github:angular-ui/ui-ace",
      "ssh": "git@github.com:angular-ui/ui-ace.git",
      "sshUrl": "git+ssh://git@github.com/angular-ui/ui-ace.git",
      "type": "github"
    },
    "name": "angular-ui-ace",
    "raw": "angular-ui-ace@git+https://github.com/angular-ui/ui-ace.git",
    "rawSpec": "git+https://github.com/angular-ui/ui-ace.git",
    "scope": null,
    "spec": "git+https://github.com/angular-ui/ui-ace.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/angular-ui/ui-ace.git#4c62a97e0adc60b7cde2be4caf902ac95c5c8c34",
  "_shasum": "cc639d6785dacdd722ca0f7b464b6306a4d8fc5d",
  "_shrinkwrap": null,
  "_spec": "angular-ui-ace@git+https://github.com/angular-ui/ui-ace.git",
  "_where": "/Users/machow/Dropbox/Repo/web/dataglamp",
  "author": {
    "name": "https://github.com/angular-ui/ui-ace/graphs/contributors"
  },
  "bugs": {
    "url": "https://github.com/angular-ui/ui-ace/issues"
  },
  "dependencies": {},
  "description": "This directive allows you to add ACE editor elements.",
  "devDependencies": {
    "angular-ui-publisher": "~1.x",
    "grunt": "~0.4.5",
    "grunt-contrib-connect": "~0.9.0",
    "grunt-contrib-copy": "~0.7.0",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-uglify": "~0.7.0",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-conventional-changelog": "~1.1.0",
    "grunt-karma": "~0.9.0",
    "grunt-ng-annotate": "^0.8.0",
    "jasmine-core": "^2.1.3",
    "karma": "~0.12.31",
    "karma-chrome-launcher": "~0.1.7",
    "karma-coverage": "~0.2.7",
    "karma-firefox-launcher": "~0.1.4",
    "karma-jasmine": "~0.3.4",
    "karma-phantomjs-launcher": "~0.1.4",
    "load-grunt-tasks": "~2.0.0"
  },
  "gitHead": "4c62a97e0adc60b7cde2be4caf902ac95c5c8c34",
  "homepage": "http://angular-ui.github.com",
  "license": "MIT",
  "main": "./ui-ace.js",
  "name": "angular-ui-ace",
  "optionalDependencies": {},
  "readme": "# UI.Ace directive [![Build Status](https://travis-ci.org/angular-ui/ui-ace.svg)](https://travis-ci.org/angular-ui/ui-ace)\n\nThis directive allows you to add [ACE](http://ajaxorg.github.io/ace/) editor elements.\n\n## Requirements\n\n- AngularJS\n- [Ace 1.x](https://github.com/ajaxorg/ace-builds/)\n\n\n## Usage\n\nYou can get it from [Bower](http://bower.io/)\n\n```sh\nbower install angular-ui-ace#bower\n```\n\nThis will copy the UI.Ace files into a `bower_components` folder, along with its dependencies. Load the script files in your application:\n\n```html\n<script type=\"text/javascript\" src=\"bower_components/ace-builds/src-min-noconflict/ace.js\"></script>\n<script type=\"text/javascript\" src=\"bower_components/angular/angular.js\"></script>\n<script type=\"text/javascript\" src=\"bower_components/angular-ui-ace/ui-ace.js\"></script>\n```\n\nAdd the UI.Ace module as a dependency to your application module:\n\n```javascript\nvar myAppModule = angular.module('MyApp', ['ui.ace']);\n```\n\nFinally, add the directive to your html:\n\n```html\n<div ui-ace></div>\n```\n\nTo see something it's better to add some CSS, like\n\n\n```css\n.ace_editor { height: 200px; }\n```\n\n## Options\n\nAce doesn't provide a one gate access to all the options the jquery way.\nEach option is configured with the function of a specific instance.\nSee the [api doc](http://ajaxorg.github.io/ace/#nav=api) for more.\n\nAlthough, _ui-ace_ automatically handles some handy options :\n + _showGutter_ : to show the gutter or not.\n + _useWrapMode_ : to set whether or not line wrapping is enabled.\n + _theme_ : to set the theme to use.\n + _mode_ : to set the mode to use.\n + _onLoad_ : callback when the editor has finished loading (see [below](#ace-instance-direct-access)).\n + _onChange_ : callback when the editor content is changed ().\n + _onBlur_ : callback when the editor is blurred ().\n + _firstLineNumber_ : to set the firstLineNumber (default: 1)\n\n```html\n<div ui-ace=\"{\n  useWrapMode : true,\n  showGutter: false,\n  theme:'twilight',\n  mode: 'xml',\n  firstLineNumber: 5,\n  onLoad: aceLoaded,\n  onChange: aceChanged\n}\"></div>\n```\n\nYou'll want to define the `onLoad` and the `onChange` callback on your scope:\n\n```javascript\nmyAppModule.controller('MyController', [ '$scope', function($scope) {\n\n  $scope.aceLoaded = function(_editor) {\n    // Options\n    _editor.setReadOnly(true);\n  };\n\n  $scope.aceChanged = function(e) {\n    //\n  };\n\n}]);\n```\n\nTo handle other options you'll have to use a direct access to the Ace created instance (see [below](#ace-instance-direct-access)).\n\n## Advanced Options\n\nYou can specify advanced options and even `require` options in the directive, as well. For this example, you\nwill have to include the `ext-language_tools.js` file from the ace source code.\n\nThis will copy the UI.Ace files into a `bower_components` folder, along with its dependencies. Load the script files in your application:\n\n```html\n<script type=\"text/javascript\" src=\"bower_components/ace-builds/src-min-noconflict/ext-language_tools.js\"></script>\n```\n\n```html\n<div ui-ace=\"{\n  require: ['ace/ext/language_tools'],\n  advanced: {\n      enableSnippets: true,\n      enableBasicAutocompletion: true,\n      enableLiveAutocompletion: true\n  }\n}\"></div>\n```\n\nTo include options applicable to the ACE renderer, you can use the `rendererOptions` key:\n\n```html\n<div ui-ace=\"{\n  rendererOptions: {\n      maxLinks: Infinity\n  }\n}\"></div>\n```\n\n## Support for concatenated bundles\n\nTrying to use ace with concatenated javascript files usually fails because it changes the physical location of the `workerPath`. If you\nneed to work with bundled or minified versions of ace, you can specify the original location of the `workerPath` on disk (_not the bundled file_).\n\nThis should be the folder on disk where `ace.js` resides.\n\n```html\n<div ui-ace=\"{\n  workerPath: '/path/to/ace/folder'\n}\"></div>\n```\n\n### Working with ng-model\n\nThe ui-ace directive plays nicely with ng-model.\n\nThe ng-model will be watched for to set the Ace EditSession value (by [setValue](http://ajaxorg.github.io/ace/#nav=api&api=edit_session)).\n\n_The ui-ace directive stores and expects the model value to be a standard javascript String._\n\n### Can be read only\n\nSimple demo\n```html\n<div ui-ace readonly></div>\nor\nCheck me to make Ace readonly: <input type=\"checkbox\" ng-model=\"checked\" ><br/>\n<div ui-ace ng-readonly=\"checked\"></div>\n```\n\n### Ace instance direct access\n\nFor more interaction with the Ace instance in the directive, we provide a direct access to it.\nUsing\n\n```html\n<div ui-ace=\"{ onLoad : aceLoaded }\" ></div>\n```\n\nthe `$scope.aceLoaded` function will be called with the [Ace Editor instance](http://ajaxorg.github.io/ace/#nav=api&api=editor) as first argument\n\n```javascript\nmyAppModule.controller('MyController', [ '$scope', function($scope) {\n\n  $scope.aceLoaded = function(_editor){\n    // Editor part\n    var _session = _editor.getSession();\n    var _renderer = _editor.renderer;\n\n    // Options\n    _editor.setReadOnly(true);\n    _session.setUndoManager(new ace.UndoManager());\n    _renderer.setShowGutter(false);\n\n    // Events\n    _editor.on(\"changeSession\", function(){ ... });\n    _session.on(\"change\", function(){ ... });\n  };\n\n}]);\n```\n\n## Testing\n\nWe use Karma and jshint to ensure the quality of the code.  The easiest way to run these checks is to use grunt:\n\n```sh\nnpm install -g grunt-cli\nnpm install && bower install\ngrunt\n```\n\nThe karma task will try to open Firefox and Chrome as browser in which to run the tests.  Make sure this is available or change the configuration in `test\\karma.conf.js`\n\n\n### Grunt Serve\n\nWe have one task to serve them all !\n\n```sh\ngrunt serve\n```\n\nIt's equal to run separately:\n\n* `grunt connect:server` : giving you a development server at [http://127.0.0.1:8000/](http://127.0.0.1:8000/).\n\n* `grunt karma:server` : giving you a Karma server to run tests (at [http://localhost:9876/](http://localhost:9876/) by default). You can force a test on this server with `grunt karma:unit:run`.\n\n* `grunt watch` : will automatically test your code and build your demo.  You can demo generation with `grunt build:gh-pages`.\n\n\n### Dist\n\nThis repo is using the [angular-ui/angular-ui-publisher](https://github.com/angular-ui/angular-ui-publisher).\nNew tags will automatically trigger a new publication.\nTo test is locally you can trigger a :\n\n```sh\ngrunt dist build:bower\n```\n\nit will put the final files in the _'dist'_ folder and a sample of the bower tag output in the _'out/built/bower'_ folder.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/angular-ui/ui-ace.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "version": "0.2.3"
}
